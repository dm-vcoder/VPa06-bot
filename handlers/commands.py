"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
"""
import csv
import io
from datetime import datetime
import telebot
from telebot import types

from database.models import TaskManager
from keyboards.inline import get_tasks_keyboard, get_cancel_keyboard

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
task_manager = TaskManager()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–∑ main.py
bot = None
storage = None

def init_bot(bot_instance, storage_instance):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    global bot, storage
    bot = bot_instance
    storage = storage_instance


class TaskStates:
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (Finite State Machine)"""
    waiting_for_task_text = "waiting_for_task_text"
    waiting_for_task_id = "waiting_for_task_id"


def cmd_start(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    """
    welcome_text = """
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
‚Ä¢ /add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
‚Ä¢ /list - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ /list_csv - —Å–∫–∞—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
‚Ä¢ /del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë –≤—Ä—É—á–Ω—É—é.
    """
    
    bot.reply_to(message, welcome_text)


def cmd_add(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    storage.set_state(message.from_user.id, message.from_user.id, TaskStates.waiting_for_task_text)
    bot.reply_to(
        message,
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=get_cancel_keyboard()
    )


def process_task_text(message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    """
    task_text = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
    if not task_text:
        bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
    if len(task_text) > 500:
        bot.reply_to(message, "‚ùå –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_name = message.from_user.full_name or message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if task_manager.add_task(task_text, user_name):
        bot.reply_to(message, "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    storage.set_state(message.from_user.id, message.from_user.id, None)


def cmd_list(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    """
    tasks = task_manager.get_all_tasks()
    
    if not tasks:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    tasks_text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á:\n\n"
    
    for task_id, text, user, created_at in tasks:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = created_at
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º ID –∫–∞–∫ —Ç—Ä–µ—Ö–∑–Ω–∞—á–Ω—ã–π –Ω–æ–º–µ—Ä
        formatted_id = f"{task_id:03d}"
        
        tasks_text += f"üÜî ID: {formatted_id}\n"
        tasks_text += f"üë§ –ê–≤—Ç–æ—Ä: {user}\n"
        tasks_text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {formatted_date}\n"
        tasks_text += f"üìù –ó–∞–¥–∞—á–∞: {text}\n"
        tasks_text += "‚îÄ" * 30 + "\n\n"
    
    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    if len(tasks_text) > 4000:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
        parts = []
        current_part = ""
        lines = tasks_text.split('\n')
        
        for line in lines:
            if len(current_part + line + '\n') > 4000:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        for i, part in enumerate(parts):
            if i == 0:
                bot.reply_to(message, part)
            else:
                bot.send_message(message.chat.id, part)
    else:
        bot.reply_to(message, tasks_text)


def cmd_list_csv(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /list_csv
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç CSV —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á
    """
    tasks = task_manager.get_all_tasks()
    
    if not tasks:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
    csv_buffer = io.StringIO()
    writer = csv.writer(csv_buffer, delimiter='\t')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±—É–ª—è—Ü–∏—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    writer.writerow(['ID', '–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏', '–ê–≤—Ç–æ—Ä', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'])
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    for task_id, text, user, created_at in tasks:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            formatted_date = dt.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = created_at
        
        writer.writerow([task_id, text, user, formatted_date])
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    csv_content = csv_buffer.getvalue()
    csv_buffer.close()
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    csv_file = io.BytesIO(csv_content.encode('utf-8'))
    csv_file.name = f"tasks_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    
    bot.send_document(
        message.chat.id,
        document=csv_file,
        caption="üìä –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
    )


def cmd_delete(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /del
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    tasks = task_manager.get_all_tasks()
    
    if not tasks:
        bot.reply_to(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
        return
    
    bot.reply_to(
        message,
        "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_tasks_keyboard(tasks)
    )


def process_delete_task(callback):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
    task = task_manager.get_task_by_id(task_id)
    
    if not task:
        bot.answer_callback_query(callback.id, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É
    if task_manager.delete_task(task_id):
        bot.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", callback.message.chat.id, callback.message.message_id)
    else:
        bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.", callback.message.chat.id, callback.message.message_id)
    
    bot.answer_callback_query(callback.id)


def process_cancel_delete(callback):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
    """
    bot.edit_message_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", callback.message.chat.id, callback.message.message_id)
    storage.set_state(callback.from_user.id, callback.from_user.id, None)
    bot.answer_callback_query(callback.id)
